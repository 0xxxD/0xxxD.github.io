<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0xxxD Blog</title>
    <description>这里是 @0xxxD 的个人博客</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 21 Apr 2023 00:50:09 +0800</pubDate>
    <lastBuildDate>Fri, 21 Apr 2023 00:50:09 +0800</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>iOS启动优化实践</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/article/tx0tcv9h6lkvknokqn7i&quot;&gt;抖音 iOS 启动优化实战&lt;/a&gt;   对启动优化做了理论上的详细描述，BUT没有任何代码Demo开源 : (&lt;/p&gt;

  &lt;p&gt;这里我通过文中细节以及自己的测试实践来展示下demo级别的实现和原理，仅供参考。&lt;/p&gt;

  &lt;p&gt;有任何想法或者不足可以留言交流&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;监控实现&quot;&gt;监控实现&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/0xxxD/0xxxd.github.io/main/img/in-post/launch-phase.webp&quot; style=&quot;zoom:75%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里将上图箭头中六个时机用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forkstart&lt;/code&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadstart&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mainStart&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appDelegateFinishLaunchStart&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appDelegateFinishLaunchEnd&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchEnd&lt;/code&gt; 表示&lt;/p&gt;

&lt;p&gt;实现细节见&lt;a href=&quot;https://www.infoq.cn/article/tx0tcv9h6lkvknokqn7i&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;其中1到2阶段的时间节点是通过手动构造一个A的&lt;strong&gt;动态库&lt;/strong&gt;，写个A.m然后实现+load方法保证第一个+load执行的时机（Cocoapods会根据pod名升序来注入依赖顺序），注意A的MachO Type动态库才行，最开始其实是实验出来的（用静态链接方式会发现其他某些库的load加载会在A之前），这里我通过dyld源码找到答案，这里就不展开了，感兴趣的可以看下我发的&lt;a href=&quot;https://www.infoq.cn/article/tx0tcv9h6lkvknokqn7i&quot;&gt;另一篇文章&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;后面应该会更新这里&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;时间节点获取通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CACurrentMediaTime()&lt;/code&gt;（底层为）或者更为高效的可以使用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;优化方案&quot;&gt;优化方案：&lt;/h3&gt;

&lt;h5 id=&quot;process-start阶段&quot;&gt;&lt;strong&gt;Process Start阶段&lt;/strong&gt;:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;尽量减少动态库数量，demo中基于cocoapods的话可在podfile通过添加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use_frameworks! :linkage =&amp;gt; :static&lt;/code&gt;来实践&lt;/li&gt;
  &lt;li&gt;减少&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt;方法数量以减少pageIn和本身带来的耗时&lt;/li&gt;
  &lt;li&gt;二进制重排&lt;/li&gt;
  &lt;li&gt;动态库懒加载&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;pre-main阶段&quot;&gt;pre main阶段:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;可以通过hook的方式统计项目中存在的+load方法情况，日常防裂化可以可以通过CI静态分析来做，这个就不在这里展开&lt;/li&gt;
  &lt;li&gt;load本身执行也会带来耗时 可以通过hook load来进行耗时检测，比如 &lt;a href=&quot;https://github.com/huakucha/TTAnalyzeLoadTime&quot;&gt;TTAnalyzeLoadTime&lt;/a&gt;提供了具体实现，demo中也对某些影响启动时间的三方库（比如QCloudCOSXML中这个&lt;a href=&quot;https://github.com/tencentyun/qcloud-sdk-ios/issues/36&quot;&gt;issue&lt;/a&gt;）中categry和class中的+load通过hook的方式延迟到启动结束且runloop空闲时执行（这里其实可以加入更多非启动必须库的+load的白名单范围做进一步优化）&lt;/li&gt;
  &lt;li&gt;对于C++构造函数的执行，可以&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先建立一个&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Apr 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/04/20/ios-launch-improve-practice/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/04/20/ios-launch-improve-practice/</guid>
        
        <category>iOS</category>
        
        <category>启动优化</category>
        
        
      </item>
    
  </channel>
</rss>
